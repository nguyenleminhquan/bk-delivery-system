pr:
  - master
  - develop
  
variables:
  - group: docker-repo
  - name: isDevelop
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  - name: isMaster
    value: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

stages:
  - stage: Build
    displayName: Build and deploy 
    pool:
      name: VM-CPU12195
    condition: and(eq(variables.isDevelop, 'false'), eq(variables.isMaster, 'false'))
    jobs:
      - job: checkVersion
        displayName: Check node and npm version
        steps:
          - task: Bash@3
            displayName: Check node and npm version
            inputs:
              targetType: inline
              script: |
                echo "-------------------------------"
                echo "Node version"
                node -v
                echo "-------------------------------"
                echo "npm version"
                npm -v
                echo "-------------------------------"
      - job: build_be_image
        displayName: Build Backend image
        steps:
          - task: Bash@3
            displayName: Copy .env to build directory
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/copy-env.sh
                . ./azure-devops/copy-env.sh
          - task: Docker@2
            displayName: Login to Docker Hub
            inputs:
              command: login
              containerRegistry: $(containerRegistry)
          - task: Docker@2
            displayName: Build image
            inputs:
              command: build
              repository: $(repoBackend)
              Dockerfile: backend/Dockerfile
              buildContext: backend/
              tags:
                $(tag)
          - task: Bash@3
            displayName: Create an container for testing
            inputs:
              targetType: inline
              script: docker container run -d --name healthcheck -p 5001:5000 $(repoBackend):$(tag) 
          - task: Bash@3
            displayName: Health check
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/healthcheck.sh 
                . ./azure-devops/healthcheck.sh
          - task: Bash@3
            displayName: Remove container health check
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/rm-healthcheck.sh
                . ./azure-devops/rm-healthcheck.sh
          - task: Bash@3
            displayName: Retag image to latest
            inputs:
              targetType: inline
              script: |
                docker tag $(repoBackend):$(tag) $(repoBackend):latest
          - task: Docker@2  
            displayName: Push image with latest tag
            inputs:
              command: push
              repository: $(repoBackend)
              tags: latest
          - task: Bash@3
            displayName: Remove image with tag number
            inputs:
              targetType: inline 
              script: |
                docker image rm -f $(repoBackend):$(tag)
          - task: Bash@3
            displayName: Remove image with tag latest
            inputs:
              targetType: inline
              script: |
                docker image rm -f $(repoBackend):latest
          - task: Bash@3
            displayName: Remove older Backend container
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/rm-old-be-container.sh
                . ./azure-devops/rm-old-be-container.sh

      - job: run_be
        displayName: Run Backend container
        dependsOn: build_be_image
        condition: succeeded()
        steps:
          - task: Bash@3
            displayName: Run Backend image
            inputs:
              targetType: inline
              script: |
                docker run -d -p 5000:5000 --name backend $(repoBackend):latest
            
      - job: build_fe_image
        displayName: Build Frontend image
        dependsOn: run_be
        condition: succeeded()
        steps:
          - task: Docker@2
            displayName: Login to Docker Hub
            inputs:
              command: login
              containerRegistry: $(containerRegistry)
          - task: Docker@2
            displayName: Build image
            inputs:
              command: build
              repository: $(repoFrontend)
              Dockerfile: frontend/Dockerfile
              buildContext: frontend/
              tags:
                $(tag)
          - task: Bash@3
            displayName: Create an container for testing
            inputs:
              targetType: inline
              script: docker container run -d --name healthcheck -p 3001:3000 $(repoFrontend):$(tag) 
          - task: Bash@3
            displayName: Health check
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/healthcheck.sh 
                . ./azure-devops/healthcheck.sh
          - task: Bash@3
            displayName: Remove container health check
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/rm-healthcheck.sh
                . ./azure-devops/rm-healthcheck.sh
          - task: Bash@3
            displayName: Retag image to latest
            inputs:
              targetType: inline
              script: |
                docker tag $(repoFrontend):$(tag) $(repoFrontend):latest
          - task: Docker@2  
            displayName: Push image with latest tag
            inputs:
              command: push
              repository: $(repoFrontend)
              tags: latest
          - task: Bash@3
            displayName: Remove image with tag number
            inputs:
              targetType: inline 
              script: |
                docker image rm -f $(repoFrontend):$(tag)
          - task: Bash@3
            displayName: Remove image with tag latest
            inputs:
              targetType: inline
              script: |
                docker image rm -f $(repoFrontend):latest
          - task: Bash@3
            displayName: Remove older Frontend container
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/rm-old-fe-container.sh
                . ./azure-devops/rm-old-fe-container.sh
      - job: run_fe
        displayName: Run Frontend container
        dependsOn: build_fe_image
        condition: succeeded()
        steps:
          - task: Bash@3
            displayName: Run Frontend image
            inputs:
              targetType: inline
              script: |
                docker run -d -p 3000:3000 --name frontend $(repoFrontend):latest

  - stage: deploy_dev
    displayName: Deploy to develop 
    pool:
      name: VM-CPU12195
    condition: eq(variables.isDevelop, 'true')
    jobs:
      - job: deploy_dev 
        displayName: Deploy on dev
        steps:
          - task: Bash@3
            displayName: Remove older dev FE container
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/rm-old-dev-fe-container.sh
                . ./azure-devops/rm-old-dev-fe-container.sh
          - task: Bash@3
            displayName: Run Frontend image on develop
            inputs:
              targetType: inline
              script: |
                docker run -d -p 4000:3000 --name frontend-dev $(repoFrontend):latest

  - stage: deploy_prod
    displayName: Deploy to production
    pool:
      name: VM-CPU12195
    condition: eq(variables.isMaster, 'true')
    jobs:
      - job: deploy_production
        displayName: Deploy to production
        steps:
          - task: Bash@3
            displayName: Remove older prod FE container
            inputs:
              targetType: inline
              script: |
                chmod +x azure-devops/rm-old-prod-fe-container.sh
                . ./azure-devops/rm-old-prod-fe-container.sh
          - task: Bash@3
            displayName: Run Frontend image on production
            inputs:
              targetType: inline
              script: | 
                docker run -d -p 4001:3000 --name frontend-prod $(repoFrontend):latest
